{"version":3,"sources":["atom/atom.tsx","component/Playground.tsx","component/SimpleTab.tsx","component/Editor.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TabState","atom","key","default","HtmlState","CssState","JsState","Playground","html","useRecoilValue","css","js","HTML","useState","start","setStart","useEffect","timerId","setInterval","clearInterval","className","sandbox","srcDoc","a11yProps","index","id","useStyles","makeStyles","theme","root","flexGrow","width","backgroundColor","palette","background","paper","SimpleTab","classes","useRecoilState","value","setValue","AppBar","position","color","Tabs","onChange","event","newValue","variant","scrollButtons","aria-label","Tab","label","Editor","number","setHtml","setCss","type","source","change","mode","name","editorProps","$blockScrolling","showPrintMargin","fontSize","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4QAEaA,G,MAASC,YAAK,CACvBC,IAAI,WACJC,QAAQ,KAGCC,EAAUH,YAAK,CACxBC,IAAI,YACJC,QAAQ,qBAGCE,EAASJ,YAAK,CACvBC,IAAI,WACJC,QAAQ,KAGCG,EAAQL,YAAK,CACtBC,IAAI,UACJC,QAAQ,KC0BGI,EAtCI,WACjB,IAAMC,EAAOC,YAAeL,GACtBM,EAAMD,YAAeJ,GACrBM,EAAKF,YAAeH,GAEpBM,EAAI,2JAMSF,EANT,sEASEF,EATF,iCAUUG,EAVV,4DALa,EAqBGE,mBAASD,GArBZ,mBAqBhBE,EArBgB,KAqBTC,EArBS,KA2BvB,OALAC,qBAAU,WACR,IAAMC,EAAUC,aAAY,kBAAMH,EAASH,KAAO,KAClD,OAAO,kBAAMO,cAAcF,MAC1B,CAACT,EAAME,EAAKC,IAGb,yBAAKS,UAAU,cACb,4BACEC,QAAQ,gBACRD,UAAU,UACVE,OAAQR,M,wCC7BVS,EAAY,SAACC,GACf,MAAO,CACHC,GAAG,cAAD,OAAgBD,GAClB,gBAAgB,mBAAhB,OAAoCA,KAItCE,EAAYC,aAAW,SAACC,GAAD,MAAmB,CAC5CC,KAAM,CACFC,SAAU,EACVC,MAAO,OACPC,gBAAiBJ,EAAMK,QAAQC,WAAWC,WA+BnCC,EA3Ba,WACxB,IAAMC,EAAUX,IADc,EAEJY,YAAetC,GAFX,mBAEvBuC,EAFuB,KAEhBC,EAFgB,KAQ9B,OACI,yBAAKpB,UAAWiB,EAAQR,MACpB,kBAACY,EAAA,EAAD,CAAQC,SAAS,SAASC,MAAM,WAC5B,kBAACC,EAAA,EAAD,CACAL,MAAOA,EACPM,SATS,SAACC,EAA8BC,GAChDP,EAASO,IASDC,QAAQ,aACRC,cAAc,OACdC,aAAW,gCAEP,kBAACC,EAAA,EAAD,eAAKC,MAAM,QAAW7B,EAAU,KAChC,kBAAC4B,EAAA,EAAD,eAAKC,MAAM,OAAU7B,EAAU,KAC/B,kBAAC4B,EAAA,EAAD,eAAKC,MAAM,MAAS7B,EAAU,S,iBCYnC8B,G,wBA1CU,WACrB,IAAMC,EAAQ7C,YAAeT,GADF,EAENsC,YAAelC,GAFT,mBAEpBI,EAFoB,KAEf+C,EAFe,OAGRjB,YAAejC,GAHP,mBAGpBK,EAHoB,KAGhB8C,EAHgB,OAIVlB,YAAehC,GAJL,mBAMrBmD,EAAK,CACP,CACIA,KAAK,OACLC,OAAOlD,EACPmD,OAAOJ,GAEX,CACIE,KAAK,MACLC,OAAOhD,EACPiD,OAAOH,GAEX,CACIC,KAAK,aACLC,OAnBmB,KAoBnBC,OApBmB,OAwB3B,OACI,yBAAKvC,UAAU,UACX,kBAAC,EAAD,MACA,kBAAC,IAAD,CACIwC,KAAMH,EAAKH,GAAQG,KACnB7B,MAAM,UACNiC,KAAK,mBACLC,YAAa,CAAEC,iBAAiB,GAChChC,MAAM,OACNiC,iBAAiB,EACjBzB,MAAOkB,EAAKH,GAAQI,OACpBb,SAAU,SAAAN,GAAQkB,EAAKH,GAAQK,OAAOpB,IACtC0B,SAAU,QClCXC,EAXO,WACpB,OACE,kBAAC,IAAD,KACE,yBAAK9C,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCCY+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.810ef361.chunk.js","sourcesContent":["import {atom} from 'recoil';\r\n\r\nexport const TabState=atom({\r\n    key:\"tabstate\",\r\n    default:0  \r\n})\r\n\r\nexport const HtmlState=atom({\r\n    key:\"htmlstate\",\r\n    default:\"<div>Hello</div>\"\r\n})\r\n\r\nexport const CssState=atom({\r\n    key:\"cssstate\",\r\n    default:\"\"\r\n})\r\n\r\nexport const JsState=atom({\r\n    key:\"jsstate\",\r\n    default:\"\"\r\n})\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport \"./Playground.css\"\r\nimport { useRecoilValue } from 'recoil';\r\nimport { HtmlState } from \"../atom/atom\"\r\nimport { CssState } from \"../atom/atom\"\r\nimport { JsState } from \"../atom/atom\"\r\n\r\nconst Playground = () => {\r\n  const html = useRecoilValue(HtmlState)\r\n  const css = useRecoilValue(CssState)\r\n  const js = useRecoilValue(JsState)\r\n\r\n  const HTML =\r\n    `<!doctype html>\r\n        <html>\r\n          <head>\r\n            <meta charset=\"utf-8\">\r\n            <title>playground</title>\r\n            <style>${css}</style>\r\n          </head>\r\n          <body>\r\n            ${html}\r\n            <script>${js}</script>\r\n          </body>\r\n        </html>\r\n        `\r\n\r\n\r\n  const [start, setStart] = useState(HTML)\r\n  useEffect(() => {\r\n    const timerId = setInterval(() => setStart(HTML), 2000);\r\n    return () => clearInterval(timerId);\r\n  }, [html, css, js])\r\n\r\n  return (\r\n    <div className=\"playground\">\r\n      <iframe\r\n        sandbox=\"allow-scripts\"\r\n        className=\"content\"\r\n        srcDoc={start}\r\n      ></iframe>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Playground","import React from 'react';\r\nimport {useRecoilState} from 'recoil';\r\nimport{TabState} from \"../atom/atom\"\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nconst a11yProps = (index: any) => {\r\n    return {\r\n        id: `simple-tab-${index}`,\r\n        'aria-controls': `simple-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        width: '100%',\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n}));\r\n\r\nconst SimpleTab: React.FC = () => {\r\n    const classes = useStyles();\r\n    const [value, setValue] = useRecoilState(TabState);\r\n\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\" color=\"default\">\r\n                <Tabs \r\n                value={value} \r\n                onChange={handleChange} \r\n                variant=\"scrollable\"\r\n                scrollButtons=\"auto\"\r\n                aria-label=\"scrollable auto tabs example\"\r\n                >\r\n                    <Tab label=\"HTML\" {...a11yProps(0)} />\r\n                    <Tab label=\"CSS\" {...a11yProps(1)} />\r\n                    <Tab label=\"JS\" {...a11yProps(2)} />\r\n                </Tabs>\r\n            </AppBar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SimpleTab","import React from 'react';\r\nimport { useRecoilValue,useRecoilState } from 'recoil';\r\nimport {TabState} from \"../atom/atom\"\r\nimport {HtmlState} from \"../atom/atom\"\r\nimport {CssState} from \"../atom/atom\"\r\nimport {JsState} from \"../atom/atom\"\r\nimport \"./Editor.css\"\r\nimport SimpleTab from \"./SimpleTab\"\r\nimport AceEditor from \"react-ace\";\r\nimport \"ace-builds/src-noconflict/theme-monokai\";\r\nimport \"ace-builds/src-noconflict/mode-html\";\r\nimport \"ace-builds/src-noconflict/mode-css\";\r\nimport \"ace-builds/src-noconflict/mode-javascript\";\r\n\r\n\r\nconst Editor: React.FC = () => {\r\n    const number =useRecoilValue(TabState)\r\n    const [html,setHtml]=useRecoilState(HtmlState)\r\n    const [css,setCss]=useRecoilState(CssState)\r\n    const [js,setJs]=useRecoilState(JsState)\r\n\r\n    const type=[\r\n        {\r\n            type:\"html\",\r\n            source:html,\r\n            change:setHtml\r\n        },\r\n        {\r\n            type:\"css\",\r\n            source:css,\r\n            change:setCss\r\n        },\r\n        {\r\n            type:\"javascript\",\r\n            source:js,\r\n            change:setJs\r\n        }\r\n    ]\r\n    \r\n    return (\r\n        <div className=\"editor\">\r\n            <SimpleTab />\r\n            <AceEditor\r\n                mode={type[number].type}\r\n                theme=\"monokai\"\r\n                name=\"UNIQUE_ID_OF_DIV\"\r\n                editorProps={{ $blockScrolling: true }}\r\n                width=\"100%\"\r\n                showPrintMargin={false}\r\n                value={type[number].source}\r\n                onChange={value=>{type[number].change(value)}}\r\n                fontSize={17}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Editor","import React from 'react';\nimport { RecoilRoot, } from 'recoil';\nimport './App.css';\nimport Playground from \"./component/Playground\"\nimport Editor from \"./component/Editor\"\n\nconst App: React.FC = () => {\n  return (\n    <RecoilRoot>\n      <div className=\"app\">\n        <Playground />\n        <Editor />\n      </div>\n    </RecoilRoot>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}